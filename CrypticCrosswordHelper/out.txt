<script type="text/javascript">
                                        document.domain = "guardian.co.uk";
                        
</script>
<script type="text/javascript">
			//<![CDATA[
				OAS_url = 'http://oas.guardian.co.uk/RealMedia/ads/';
				OAS_sitepage = "www.guardian.co.uk/crosswords/cryptic/22448/oas.html";
				OAS_listpos = 'Top,Middle1';

								OAS_query = 'k=crosswords&cf=not+commercially+useful&pid=&ct=crossword&pt=resource_content&';
				OAS_target = '_blank';

				OAS_rn = '001234567890';
				OAS_rns = '1234567890';
				OAS_rn = new String (Math.random());
				OAS_rns = OAS_rn.substring (2, 11);
			//]]>
		
</script>
<script type="text/javascript">
//<![CDATA[
	if (!commonStaticRoot) {	
		var commonStaticRoot = "http://static.guim.co.uk/static/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/common/";
	}
	if (!sectionStaticRoot) {	
		var sectionStaticRoot = "http://static.guim.co.uk/static/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/crosswords/";
	}
	if (!staticHost) {	
		var staticHost="http://www.guardian.co.uk/";
	}
	if (!sitePrefixUrl) {
		var sitePrefixUrl = "http://www.guardian.co.uk";
	}
//]]>

</script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"></script>
<script>window.jQuery || document.write('<script src="http://static.guim.co.uk/static/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/common/external-scripts/jquery-1.6.4.min.js">\x3C/script>')
</script>
<script src="http://static.guim.co.uk/static/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/common/external-scripts/jquery-libraries/jquery.cookie.js"></script>
<script src="http://static.guim.co.uk/static/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/common/external-scripts/jquery-libraries/jquery.writeCapture-1.0.5-min.js"></script>
<script>var jQ = jQuery.noConflict();
</script>
<script type="text/javascript">
	//<![CDATA[
	function insertStyleSheet(href) {
		var styleObject = document.createElement('link');
		styleObject.setAttribute('href', commonStaticRoot + href);
		styleObject.setAttribute('type', 'text/css');
		styleObject.setAttribute('media', 'screen');
		styleObject.setAttribute('rel', 'stylesheet');
		var head = document.getElementsByTagName('head')[0];
		head.appendChild(styleObject);
	}
	insertStyleSheet('styles/js-on.css');
	insertPluckStylesheet = true;
	//]]>

</script>
<script src="http://static.guim.co.uk/static/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/common/scripts/gu-core.js"></script>
<script>
	//<![CDATA[
	function init() {
		urlStack.clearUrlStack();
		var signOutLink = document.getElementById("sign-out");
		if (signOutLink) {
			signOutLink.onclick = signOut;
		}
		
		// Purely styling
		jQ('.js-show').removeClass('js-show');
	}

    guardian.r2.resourceRoot = "http://resource.guim.co.uk/";
    var pageUrl = "http://www.guardian.co.uk/crosswords/cryptic/22448";
    var pageSignature =  "e79fbaca08d3effa3a0a0833a2a0f6b1d53665952b7f3a3cd0e5849f182561ba";
    
	var thirdPartyReferralCookieService = new guardian.r2.ThirdPartyReferralCookieService();
	thirdPartyReferralCookieService.setThirdPartyReferralCookie();
		
	var urlStack = new UrlStack(".guardian.co.uk");	
	var communitiesSite = false;

    
            
	guardian.r2.signInListeners = new guardian.r2.SignInListeners();
    (function () {	
		var signInView = new guardian.r2.SignInView("http://static.guim.co.uk/static/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/common/scripts/md5.js", communitiesSite);
		guardian.r2.signInController = new guardian.r2.SignInController(signInView, guardian.r2.signInListeners, "http://www.guardian.co.uk/tools/signin", pageUrl, pageSignature);
		
	}) ();
	
	(function () {
		var profileLinkView = new guardian.r2.ProfileLinkView();
		profileLinkController = new guardian.r2.ProfileLinkController(profileLinkView, "http://www.guardian.co.uk/discussion/user/");
	}) ();

	jQ(document).ready(init);
	//]]>

</script>
<script type="text/javascript" src="http://combo.guim.co.uk/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/common/scripts/guardian.r2.OmnitureTracking+common/scripts/signinTopNav.js"></script>
<script type="text/javascript" src="http://combo.guim.co.uk/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/m-141~js/crossword+m-141~js/jquery.cookie+m-141~js/jquery.hotkeys-0.8+m-661~static/1755/comment-formatting+m-661~static/1755/comment-replyto+m-661~static/1755/comment-setup+m-661~static/1755/jquery-ui-1.7.3.custom.min+m-661~static/1755/redirect-pluck-permalink.js"></script>
<script type="text/javascript">
	ensurePackage('guardian.r2');

	guardian.r2.dropDownMenu = function () {
	
		// bar set up
		jQ('.top-navigation').show().addClass('top-navigation-js');
		jQ('#fake-bar').remove();

		// functionality
		jQ('.drop-down').mouseover(function() {
			jQ(this).find('ul').css('display', 'block');
		});

		jQ('.drop-down').mouseout(function() {
			jQ(this).find('ul').css('display', 'none');
		});

	};	
	
	jQ(document).ready(function() {
		var myDropDownMenu = new guardian.r2.dropDownMenu();
	});

</script>
<script>
		
			var crossword_identifier = 'crossword-agh4LXB1enpsZXIQCxIJQ3Jvc3N3b3JkGJxIDA';
			var intersections = {};
			
				intersections["6-down-7"] = "15-across-1";
			
				intersections["11-across-8"] = "8-down-5";
			
				intersections["8-down-7"] = "15-across-5";
			
				intersections["9-across-13"] = "7-down-3";
			
				intersections["17-down-3"] = "20-across-3";
			
				intersections["2-down-5"] = "10-across-3";
			
				intersections["20-across-7"] = "13-down-6";
			
				intersections["11-across-4"] = "6-down-5";
			
				intersections["15-across-1"] = "6-down-7";
			
				intersections["6-down-9"] = "18-across-5";
			
				intersections["18-across-3"] = "5-down-9";
			
				intersections["18-across-1"] = "13-down-4";
			
				intersections["13-down-10"] = "27-across-1";
			
				intersections["1-down-3"] = "9-across-1";
			
				intersections["6-down-3"] = "9-across-11";
			
				intersections["11-across-6"] = "7-down-5";
			
				intersections["19-down-1"] = "18-across-7";
			
				intersections["1-down-5"] = "10-across-1";
			
				intersections["9-across-1"] = "1-down-3";
			
				intersections["25-across-1"] = "14-down-7";
			
				intersections["20-across-3"] = "17-down-3";
			
				intersections["5-down-3"] = "9-across-9";
			
				intersections["3-down-3"] = "9-across-5";
			
				intersections["1-across-5"] = "3-down-1";
			
				intersections["5-down-1"] = "1-across-9";
			
				intersections["14-across-1"] = "14-down-1";
			
				intersections["3-down-1"] = "1-across-5";
			
				intersections["8-down-1"] = "6-across-5";
			
				intersections["6-down-1"] = "6-across-1";
			
				intersections["1-across-9"] = "5-down-1";
			
				intersections["17-down-5"] = "25-across-3";
			
				intersections["14-across-5"] = "12-down-2";
			
				intersections["15-across-5"] = "8-down-7";
			
				intersections["7-down-1"] = "6-across-3";
			
				intersections["9-across-9"] = "5-down-3";
			
				intersections["26-across-5"] = "12-down-10";
			
				intersections["8-down-9"] = "18-across-9";
			
				intersections["7-down-3"] = "9-across-13";
			
				intersections["16-across-5"] = "12-down-4";
			
				intersections["17-down-7"] = "26-across-3";
			
				intersections["1-across-1"] = "1-down-1";
			
				intersections["1-across-3"] = "2-down-1";
			
				intersections["10-across-1"] = "1-down-5";
			
				intersections["1-across-7"] = "4-down-1";
			
				intersections["14-across-3"] = "2-down-7";
			
				intersections["20-across-1"] = "14-down-5";
			
				intersections["14-across-7"] = "13-down-2";
			
				intersections["16-across-3"] = "17-down-1";
			
				intersections["14-across-9"] = "5-down-7";
			
				intersections["12-down-10"] = "26-across-5";
			
				intersections["18-across-5"] = "6-down-9";
			
				intersections["18-across-7"] = "19-down-1";
			
				intersections["4-down-1"] = "1-across-7";
			
				intersections["27-across-3"] = "23-down-4";
			
				intersections["21-across-4"] = "22-down-1";
			
				intersections["25-across-15"] = "22-down-3";
			
				intersections["27-across-9"] = "22-down-5";
			
				intersections["15-across-3"] = "7-down-7";
			
				intersections["5-down-7"] = "14-across-9";
			
				intersections["24-down-2"] = "25-across-11";
			
				intersections["25-across-9"] = "23-down-2";
			
				intersections["27-across-1"] = "13-down-10";
			
				intersections["9-across-5"] = "3-down-3";
			
				intersections["26-across-1"] = "14-down-9";
			
				intersections["19-down-5"] = "25-across-13";
			
				intersections["24-down-4"] = "27-across-5";
			
				intersections["25-across-11"] = "24-down-2";
			
				intersections["19-down-7"] = "27-across-7";
			
				intersections["27-across-5"] = "24-down-4";
			
				intersections["9-across-3"] = "2-down-3";
			
				intersections["27-across-7"] = "19-down-7";
			
				intersections["4-down-3"] = "9-across-7";
			
				intersections["1-down-1"] = "1-across-1";
			
				intersections["2-down-1"] = "1-across-3";
			
				intersections["2-down-3"] = "9-across-3";
			
				intersections["14-down-1"] = "14-across-1";
			
				intersections["2-down-7"] = "14-across-3";
			
				intersections["17-down-1"] = "16-across-3";
			
				intersections["6-across-5"] = "8-down-1";
			
				intersections["5-down-5"] = "11-across-2";
			
				intersections["12-down-6"] = "20-across-5";
			
				intersections["7-down-5"] = "11-across-6";
			
				intersections["7-down-7"] = "15-across-3";
			
				intersections["23-down-2"] = "25-across-9";
			
				intersections["23-down-4"] = "27-across-3";
			
				intersections["22-down-1"] = "21-across-4";
			
				intersections["22-down-3"] = "25-across-15";
			
				intersections["22-down-5"] = "27-across-9";
			
				intersections["11-across-2"] = "5-down-5";
			
				intersections["13-down-8"] = "25-across-7";
			
				intersections["26-across-3"] = "17-down-7";
			
				intersections["10-across-3"] = "2-down-5";
			
				intersections["12-down-2"] = "14-across-5";
			
				intersections["8-down-5"] = "11-across-8";
			
				intersections["14-down-3"] = "16-across-1";
			
				intersections["9-across-15"] = "8-down-3";
			
				intersections["25-across-13"] = "19-down-5";
			
				intersections["25-across-5"] = "12-down-8";
			
				intersections["5-down-9"] = "18-across-3";
			
				intersections["25-across-7"] = "13-down-8";
			
				intersections["6-down-5"] = "11-across-4";
			
				intersections["16-across-1"] = "14-down-3";
			
				intersections["13-down-6"] = "20-across-7";
			
				intersections["12-down-4"] = "16-across-5";
			
				intersections["8-down-3"] = "9-across-15";
			
				intersections["19-down-3"] = "21-across-2";
			
				intersections["25-across-3"] = "17-down-5";
			
				intersections["9-across-7"] = "4-down-3";
			
				intersections["14-down-7"] = "25-across-1";
			
				intersections["13-down-2"] = "14-across-7";
			
				intersections["20-across-5"] = "12-down-6";
			
				intersections["14-down-9"] = "26-across-1";
			
				intersections["6-across-1"] = "6-down-1";
			
				intersections["13-down-4"] = "18-across-1";
			
				intersections["14-down-5"] = "20-across-1";
			
				intersections["21-across-2"] = "19-down-3";
			
				intersections["18-across-9"] = "8-down-9";
			
				intersections["9-across-11"] = "6-down-3";
			
				intersections["6-across-3"] = "7-down-1";
			
				intersections["12-down-8"] = "25-across-5";
			
			var words_for_clue = {};
			
				words_for_clue["12-down"] = ['12-down'];
			
				words_for_clue["22-down"] = ['22-down'];
			
				words_for_clue["6-across"] = ['6-across'];
			
				words_for_clue["1-down"] = ['1-down'];
			
				words_for_clue["4-down"] = ['4-down'];
			
				words_for_clue["7-down"] = ['7-down'];
			
				words_for_clue["11-across"] = ['11-across'];
			
				words_for_clue["18-across"] = ['18-across'];
			
				words_for_clue["14-across"] = ['14-across'];
			
				words_for_clue["24-down"] = ['24-down'];
			
				words_for_clue["23-down"] = ['23-down'];
			
				words_for_clue["15-across"] = ['15-across'];
			
				words_for_clue["25-across"] = ['25-across'];
			
				words_for_clue["17-down"] = ['17-down'];
			
				words_for_clue["27-across"] = ['27-across'];
			
				words_for_clue["20-across"] = ['20-across'];
			
				words_for_clue["14-down"] = ['14-down'];
			
				words_for_clue["3-down"] = ['3-down'];
			
				words_for_clue["16-across"] = ['16-across'];
			
				words_for_clue["1-across"] = ['1-across'];
			
				words_for_clue["8-down"] = ['8-down'];
			
				words_for_clue["13-down"] = ['13-down'];
			
				words_for_clue["6-down"] = ['6-down'];
			
				words_for_clue["21-across"] = ['21-across'];
			
				words_for_clue["9-across"] = ['9-across'];
			
				words_for_clue["19-down"] = ['19-down'];
			
				words_for_clue["5-down"] = ['5-down'];
			
				words_for_clue["2-down"] = ['2-down'];
			
				words_for_clue["10-across"] = ['10-across'];
			
				words_for_clue["26-across"] = ['26-across'];
			
			var solutions = {};
			
				
					solutions["1-across-1"] = "M";
				
					solutions["1-across-2"] = "A";
				
					solutions["1-across-3"] = "J";
				
					solutions["1-across-4"] = "O";
				
					solutions["1-across-5"] = "R";
				
					solutions["1-across-6"] = "R";
				
					solutions["1-across-7"] = "O";
				
					solutions["1-across-8"] = "A";
				
					solutions["1-across-9"] = "D";
				
			
				
					solutions["6-across-1"] = "A";
				
					solutions["6-across-2"] = "S";
				
					solutions["6-across-3"] = "S";
				
					solutions["6-across-4"] = "E";
				
					solutions["6-across-5"] = "T";
				
			
				
					solutions["9-across-1"] = "C";
				
					solutions["9-across-2"] = "O";
				
					solutions["9-across-3"] = "M";
				
					solutions["9-across-4"] = "P";
				
					solutions["9-across-5"] = "A";
				
					solutions["9-across-6"] = "N";
				
					solutions["9-across-7"] = "Y";
				
					solutions["9-across-8"] = "P";
				
					solutions["9-across-9"] = "R";
				
					solutions["9-across-10"] = "O";
				
					solutions["9-across-11"] = "M";
				
					solutions["9-across-12"] = "O";
				
					solutions["9-across-13"] = "T";
				
					solutions["9-across-14"] = "E";
				
					solutions["9-across-15"] = "R";
				
			
				
					solutions["10-across-1"] = "H";
				
					solutions["10-across-2"] = "A";
				
					solutions["10-across-3"] = "U";
				
					solutions["10-across-4"] = "L";
				
			
				
					solutions["11-across-1"] = "A";
				
					solutions["11-across-2"] = "G";
				
					solutions["11-across-3"] = "A";
				
					solutions["11-across-4"] = "N";
				
					solutions["11-across-5"] = "I";
				
					solutions["11-across-6"] = "P";
				
					solutions["11-across-7"] = "P";
				
					solutions["11-across-8"] = "E";
				
			
				
					solutions["14-across-1"] = "R";
				
					solutions["14-across-2"] = "I";
				
					solutions["14-across-3"] = "F";
				
					solutions["14-across-4"] = "L";
				
					solutions["14-across-5"] = "E";
				
					solutions["14-across-6"] = "B";
				
					solutions["14-across-7"] = "U";
				
					solutions["14-across-8"] = "T";
				
					solutions["14-across-9"] = "T";
				
			
				
					solutions["15-across-1"] = "T";
				
					solutions["15-across-2"] = "A";
				
					solutions["15-across-3"] = "N";
				
					solutions["15-across-4"] = "G";
				
					solutions["15-across-5"] = "O";
				
			
				
					solutions["16-across-1"] = "C";
				
					solutions["16-across-2"] = "H";
				
					solutions["16-across-3"] = "A";
				
					solutions["16-across-4"] = "S";
				
					solutions["16-across-5"] = "M";
				
			
				
					solutions["18-across-1"] = "R";
				
					solutions["18-across-2"] = "I";
				
					solutions["18-across-3"] = "O";
				
					solutions["18-across-4"] = "G";
				
					solutions["18-across-5"] = "R";
				
					solutions["18-across-6"] = "A";
				
					solutions["18-across-7"] = "N";
				
					solutions["18-across-8"] = "D";
				
					solutions["18-across-9"] = "E";
				
			
				
					solutions["20-across-1"] = "P";
				
					solutions["20-across-2"] = "A";
				
					solutions["20-across-3"] = "R";
				
					solutions["20-across-4"] = "A";
				
					solutions["20-across-5"] = "S";
				
					solutions["20-across-6"] = "I";
				
					solutions["20-across-7"] = "T";
				
					solutions["20-across-8"] = "E";
				
			
				
					solutions["21-across-1"] = "S";
				
					solutions["21-across-2"] = "W";
				
					solutions["21-across-3"] = "A";
				
					solutions["21-across-4"] = "B";
				
			
				
					solutions["25-across-1"] = "P";
				
					solutions["25-across-2"] = "L";
				
					solutions["25-across-3"] = "E";
				
					solutions["25-across-4"] = "N";
				
					solutions["25-across-5"] = "I";
				
					solutions["25-across-6"] = "P";
				
					solutions["25-across-7"] = "O";
				
					solutions["25-across-8"] = "T";
				
					solutions["25-across-9"] = "E";
				
					solutions["25-across-10"] = "N";
				
					solutions["25-across-11"] = "T";
				
					solutions["25-across-12"] = "I";
				
					solutions["25-across-13"] = "A";
				
					solutions["25-across-14"] = "R";
				
					solutions["25-across-15"] = "Y";
				
			
				
					solutions["26-across-1"] = "T";
				
					solutions["26-across-2"] = "A";
				
					solutions["26-across-3"] = "S";
				
					solutions["26-across-4"] = "T";
				
					solutions["26-across-5"] = "E";
				
			
				
					solutions["27-across-1"] = "S";
				
					solutions["27-across-2"] = "E";
				
					solutions["27-across-3"] = "M";
				
					solutions["27-across-4"] = "I";
				
					solutions["27-across-5"] = "B";
				
					solutions["27-across-6"] = "R";
				
					solutions["27-across-7"] = "E";
				
					solutions["27-across-8"] = "V";
				
					solutions["27-across-9"] = "E";
				
			
				
					solutions["1-down-1"] = "M";
				
					solutions["1-down-2"] = "I";
				
					solutions["1-down-3"] = "C";
				
					solutions["1-down-4"] = "A";
				
					solutions["1-down-5"] = "H";
				
			
				
					solutions["2-down-1"] = "J";
				
					solutions["2-down-2"] = "A";
				
					solutions["2-down-3"] = "M";
				
					solutions["2-down-4"] = "P";
				
					solutions["2-down-5"] = "U";
				
					solutions["2-down-6"] = "F";
				
					solutions["2-down-7"] = "F";
				
			
				
					solutions["3-down-1"] = "R";
				
					solutions["3-down-2"] = "O";
				
					solutions["3-down-3"] = "A";
				
					solutions["3-down-4"] = "M";
				
			
				
					solutions["4-down-1"] = "O";
				
					solutions["4-down-2"] = "R";
				
					solutions["4-down-3"] = "Y";
				
					solutions["4-down-4"] = "X";
				
			
				
					solutions["5-down-1"] = "D";
				
					solutions["5-down-2"] = "E";
				
					solutions["5-down-3"] = "R";
				
					solutions["5-down-4"] = "O";
				
					solutions["5-down-5"] = "G";
				
					solutions["5-down-6"] = "A";
				
					solutions["5-down-7"] = "T";
				
					solutions["5-down-8"] = "I";
				
					solutions["5-down-9"] = "O";
				
					solutions["5-down-10"] = "N";
				
			
				
					solutions["6-down-1"] = "A";
				
					solutions["6-down-2"] = "D";
				
					solutions["6-down-3"] = "M";
				
					solutions["6-down-4"] = "O";
				
					solutions["6-down-5"] = "N";
				
					solutions["6-down-6"] = "I";
				
					solutions["6-down-7"] = "T";
				
					solutions["6-down-8"] = "O";
				
					solutions["6-down-9"] = "R";
				
					solutions["6-down-10"] = "Y";
				
			
				
					solutions["7-down-1"] = "S";
				
					solutions["7-down-2"] = "E";
				
					solutions["7-down-3"] = "T";
				
					solutions["7-down-4"] = "U";
				
					solutions["7-down-5"] = "P";
				
					solutions["7-down-6"] = "O";
				
					solutions["7-down-7"] = "N";
				
			
				
					solutions["8-down-1"] = "T";
				
					solutions["8-down-2"] = "H";
				
					solutions["8-down-3"] = "R";
				
					solutions["8-down-4"] = "E";
				
					solutions["8-down-5"] = "E";
				
					solutions["8-down-6"] = "S";
				
					solutions["8-down-7"] = "O";
				
					solutions["8-down-8"] = "M";
				
					solutions["8-down-9"] = "E";
				
			
				
					solutions["12-down-1"] = "P";
				
					solutions["12-down-2"] = "E";
				
					solutions["12-down-3"] = "R";
				
					solutions["12-down-4"] = "M";
				
					solutions["12-down-5"] = "I";
				
					solutions["12-down-6"] = "S";
				
					solutions["12-down-7"] = "S";
				
					solutions["12-down-8"] = "I";
				
					solutions["12-down-9"] = "V";
				
					solutions["12-down-10"] = "E";
				
			
				
					solutions["13-down-1"] = "N";
				
					solutions["13-down-2"] = "U";
				
					solutions["13-down-3"] = "T";
				
					solutions["13-down-4"] = "R";
				
					solutions["13-down-5"] = "I";
				
					solutions["13-down-6"] = "T";
				
					solutions["13-down-7"] = "I";
				
					solutions["13-down-8"] = "O";
				
					solutions["13-down-9"] = "U";
				
					solutions["13-down-10"] = "S";
				
			
				
					solutions["14-down-1"] = "R";
				
					solutions["14-down-2"] = "O";
				
					solutions["14-down-3"] = "C";
				
					solutions["14-down-4"] = "K";
				
					solutions["14-down-5"] = "P";
				
					solutions["14-down-6"] = "I";
				
					solutions["14-down-7"] = "P";
				
					solutions["14-down-8"] = "I";
				
					solutions["14-down-9"] = "T";
				
			
				
					solutions["17-down-1"] = "A";
				
					solutions["17-down-2"] = "I";
				
					solutions["17-down-3"] = "R";
				
					solutions["17-down-4"] = "L";
				
					solutions["17-down-5"] = "E";
				
					solutions["17-down-6"] = "S";
				
					solutions["17-down-7"] = "S";
				
			
				
					solutions["19-down-1"] = "N";
				
					solutions["19-down-2"] = "E";
				
					solutions["19-down-3"] = "W";
				
					solutions["19-down-4"] = "G";
				
					solutions["19-down-5"] = "A";
				
					solutions["19-down-6"] = "T";
				
					solutions["19-down-7"] = "E";
				
			
				
					solutions["22-down-1"] = "B";
				
					solutions["22-down-2"] = "O";
				
					solutions["22-down-3"] = "Y";
				
					solutions["22-down-4"] = "L";
				
					solutions["22-down-5"] = "E";
				
			
				
					solutions["23-down-1"] = "B";
				
					solutions["23-down-2"] = "E";
				
					solutions["23-down-3"] = "A";
				
					solutions["23-down-4"] = "M";
				
			
				
					solutions["24-down-1"] = "S";
				
					solutions["24-down-2"] = "T";
				
					solutions["24-down-3"] = "A";
				
					solutions["24-down-4"] = "B";
				
			
			
			var has_numbers = true;
			
			var path = "http://www.guardian.co.uk/crosswords/cryptic/22448"
		
		
</script>
<script type="text/javascript">
	
	function fix_domain_for_careers(url){
		var re, fixed_url;
		var careers_length = "careers".length;
		
		if (window.location.host.substr(0, careers_length) === "careers") {
			re = /http:\/\/www\./;
		    fixed_url = url.replace(re, "http://careers.");
		} else {
			re = /http:\/\/careers\./;
		    fixed_url = url.replace(re, "http://www.");
		}
		
		return fixed_url;
	}
	
	jQ(function() {
        fixPluckCommentUrl('http://www.guardian.co.uk/discussion/api/resolvePluckCommentKey?pluck-comment-keys=&amp;callback=');
		var loading_box = jQ("<div class='report-form-loading'>Loading</div>");

        jQ('a.report-abuse:not(.no-abuse-popup)').live('click', function(ev) {
			ev.preventDefault();

			loading_box.dialog({
				title: "Abuse report",
				draggable: false,
				modal: true,
				width: 400,
				minHeight: 320,
				resizable: false,
				beforeclose: function(event, ui) {
					var readOnly = jQ('.report-abuse-ajax-readonly').length;
					if(readOnly == 1) return true;

					var reason = jQ('.report-abuse-ajax-form textarea#id_reason').val();
					var thanksPage = jQ('.report-form-loading p[data-abuse-report-accepted-for-comment]').length;
					if (thanksPage == 0) {
					    thanksPage = jQ('.report-form-loading p[data-abuse-report-accepted-for-profile]').length;
					}
					if(thanksPage == 0) {
						if(reason == 0) {
							return true;
						} else {
							return confirm("Closing this window without pressing \"Report\" will result in your words being lost. Are you sure?");
						}
					}
					else {
						return true;
					}
		        },
				close: function(ev, ui) { loading_box.remove(); }
			});
			
			abuse_report_url = this.href.replace('report-abuse', 'report-abuse-ajax');			
			abuse_report_url = fix_domain_for_careers(abuse_report_url);
			
			jQ.ajax({
              url: abuse_report_url,
              success: function(data){
                  loading_box.html(data);
              }
            });
		});

		jQ('body').delegate('.report-abuse-ajax-form form', 'submit', function(ev) {
			ev.preventDefault();
			var form = jQ(this);
			var url = fix_domain_for_careers(form.attr('action'));
			jQ.post(url, form.serialize(), function(html) {
				form.parents('.ui-dialog-content').html(html);
				// Has the abuse report been accepted?
				var el = jQ(html);
				var comment_id = el.attr('data-abuse-report-accepted-for-comment');
				var profile_id = el.attr('data-abuse-report-accepted-for-profile');
				if (comment_id) {
					jQ('ul#comment-' + comment_id).find('li.abuse-report').remove();
				} else if (profile_id) {
				    jQ('p.report-abuse').remove();
				}
				var is_successful_submission = (comment_id || profile_id);
				if (is_successful_submission) {
				    window.setTimeout(function() {
					    loading_box.dialog("close");
				    }, 3000);
				}
			});
		});
		
	    //make sure submit button is enabled onReady.
	    jQ('#newcommenting-form input[type=submit]' ).removeAttr('disabled');

    	var newFormURL = window.location.protocol + '//' + window.location.host + window.location.pathname + '?#post-area';
    	jQ('div#login-container form.post-your-comments').attr('action', newFormURL);

    	jQ('div#signup-container input').click(function(){
    		urlStack.clearUrlStack();
    		urlStack.pushUrlOntoStack(newFormURL);
    		document.location = 'http://users.guardian.co.uk/signup/tr/1,,-720,00.html';
    	});

        
	    jQ('.recomended').show();

        jQ('#newcommenting-form').submit(function(){
            jQ('input[type=submit]', this).attr('disabled', 'disabled');
        });
	}); //end jQ ready

	function openAbuseBox(commentId) {
		jQ("#abuse-report-comment-id").val(commentId);
		var loading_box = jQ('<div class="report-form-loading">Loading</div>');
		loading_box.dialog({
			title:"Abuse report",
			draggable: false,
			modal:true,
			width:400,
			minHeight:320,
			resizable: false,
			beforeclose: function(event, ui) {
				var reason = jQ('textarea#id_reason').val();
				if (reason != "") {
					return confirm("Closing this window without pressing \"Report\" will result in your words being lost. Are you sure?");
				} else {
					return true;
				}
			}
		});
	}

	function recommendComment(commentId) {
	    var post_url = "http://www.guardian.co.uk/discussion/handlers/recommendComment";	    
	    post_url = fix_domain_for_careers(post_url);
	    
		jQ.post(post_url, { comment_id: commentId }, function(data) {
			if (data == "OK") {
				var span = jQ("#recommended-count-" + commentId);
				span.prev('a').contents().unwrap();
				span.text(parseInt(span.text(), 10)+1);
			}
			else {
				var span = jQ("#recommended-count-" + commentId);
				span.prev('a').contents().unwrap();
			}
		});
	}


</script>
<script type="text/javascript">
jQ(function($){$('.about-zeit').each(function(){var distance=-10;var time=250;var hideDelay=500;var hideDelayTimer=null;var beingShown=false;var shown=false;var trigger=$('.what-is',this);var info=$('.zeit-popup',this).css('opacity',0);$([trigger.get(0),info.get(0)]).mouseover(function(){if(hideDelayTimer)clearTimeout(hideDelayTimer);if(beingShown||shown){return;}else{beingShown=true;info.css({top:-97,right:0,display:'block'}).animate({top:'-='+distance+'px',opacity:1},time,'swing',function(){beingShown=false;shown=true;});}return false;}).mouseout(function(){if(hideDelayTimer)clearTimeout(hideDelayTimer);hideDelayTimer=setTimeout(function(){hideDelayTimer=null;info.animate({top:'-='+distance+'px',opacity:0},time,'swing',function(){shown=false;info.css('display','none');});},hideDelay);return false;});});});

</script>
<script type="text/javascript">

google_ad_client = 'ca-guardian_js';
google_ad_channel = 'Crosswords';

</script>
<script>

google_max_num_ads = '3';


</script>
<script type="text/javascript">
		//<![CDATA[
			if (true) {
					  writeScript("http://pagead2.googlesyndication.com/pagead/show_ads.js", false, function(){});
			}
		// ]]>
		
</script>
<script id="omnitureGeneratorScript" type="text/javascript">
	//<![CDATA[
	if(true) {
		var s_account="guardiangu-crosswords,guardiangu-network";
		writeScript('http://static.guim.co.uk/static/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/common/scripts/omniture-H.22.2.js', false, function(){});
	}
	//]]>
	
</script>
<script id="omnitureScript" type="text/javascript">


	//<![CDATA[
	if(true) {
		if (false) {
		    s.pageName = document.title;
		} else {
			s.pageName="Cryptic crossword No 22,448:Crossword:1350344";
		}
		s.channel = "Crosswords";
		s.pageType="";
		s.server='53';
		s.prop2='GUID:(none)';

					s['prop3']="Guardian";
					s['prop4']="Crosswords";
					s['prop5']="Not commercially useful";
					s['prop6']="Araucaria (crossword contributor)";
					s['prop7']="10-Feb-03";
					s['prop8']="1350344";
					s['prop9']="Crossword";
					s['prop10']="";
					s['prop11']="Crosswords";
					s['prop13']="Cryptic";
					s['prop25']="";
					s['prop30']="content";
		
		s.hier2="GU/Crosswords/";
		s.events="";
		s.eVar23="";

		try {
			if (guardian.r2.OmnitureTrackingOverride) {
				new guardian.r2.OmnitureTrackingOverride(s);
			}
		}
		catch(err) {
		}

        if(jQ.cookie("GU_OMNITURE") !== null) {
            s.events = jQ.cookie("GU_OMNITURE");
            jQ.cookie("GU_OMNITURE", null, { path: '/', domain: '.guardian.co.uk'});
        }

        var s_code=s.t();if(s_code)document.write(s_code);
	}
	//]]>
	
</script>
<script type="text/javascript">
    
    var _qevents = _qevents || [];
    
    (function() {
    	var elem = document.createElement('script');
    
    	elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge") + ".quantserve.com/quant.js";
    	elem.async = true;
    	elem.type = "text/javascript";
    	var scpt = document.getElementsByTagName('script')[0];
    	scpt.parentNode.insertBefore(elem, scpt);  
    })();
    
    _qevents.push( { qacct:'p-73ktnlRTKQPTw', labels: 'crosswords'} );
    
</script>
<script id="componentTrackingScript" type="text/javascript">
if (true) {
    jQ(document).ready(function () {
        jQ('a[data-cpt]').each(
            function () {
            jQ(this).click(
                function () {
                var cpId = jQ(this).attr('data-cpt').split("-")[1];
                var currentLink = jQ(this).attr('href');

                if (currentLink.indexOf('intcmp=') == -1) {
                    if(currentLink.indexOf('?') == -1) {
                        var separator = '?'
                    } else {
                        var separator = '&'
                    }

                    jQ(this).attr('href', currentLink + separator + "intcmp=" + cpId);
                }
            });
        });
    });
}

</script>
<script type="text/javascript">
//<![CDATA[
	if (false) {
        // guardian.co.uk Connect Adprobe Tag, MPU [9814], Leaderboard [9815]
        var wlOrd = new Date().getTime();
        document.write('<scr' + 'ipt type="text/javascript" src="http://req.connect.wunderloop.net/AP/1566/5823/9815/js?cus=9815,9814&ord=' + wlOrd + '"></sc' + 'ript>');
	}
// ]]>

</script>
<script type="text/javascript">
//<![CDATA[
	if (false) {
        OAS_query += 'wl9815=' + wl9815camp + '&wl9814=' + wl9814camp + '&';
	}
// ]]>

</script>
<script type="text/javascript">
	//<![CDATA[

	if(true) {
		ensurePackage("guardian.r2.revsci");

		guardian.r2.revsci.cookieDomain = '.guardian.co.uk';
		guardian.r2.revsci.gu_geo_country = '(none)';
		guardian.r2.revsci.siteName = 'Crosswords';
					guardian.r2.revsci.commercialFolder = 'Not+commercially+useful'
				
		addEvent(null, 'load', function () {
			writeScript('http://js.revsci.net/gateway/gw.js?csid=E05516', true, function() {
				writeScript('http://static.guim.co.uk/static/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/common/scripts/revsci.js', true, function() {
					rs_initTracking();
				})
			})
		});
	}

	// ]]>
	
</script>
<script type="text/javascript">
		//<![CDATA[
											function OAS_NORMAL(pos) {
							document.write('<A HREF="' + OAS_url + 'click_nx.ads/' + OAS_sitepage + '/1' + OAS_rns + '@' + pos + '!' + pos + '?' + OAS_query + '" TARGET=' + OAS_target + '>');
							document.write('<IMG SRC="' + OAS_url + 'adstream_nx.ads/' + OAS_sitepage + '/1' + OAS_rns + '@' + pos + '!' + pos + '?' + OAS_query + '" BORDER=0></A>');
						}

						OAS_version = 11;
						if ((navigator.userAgent.indexOf('Mozilla/3') != -1) || (navigator.userAgent.indexOf('Mozilla/4.0 WebTV') != -1)) OAS_version = 10;

                        if (true) {
                            if (OAS_version >= 11) document.write('<SCR' + 'IPT LANGUAGE=JavaScript1.1 SRC="' + OAS_url + 'adstream_mjx.ads/' + OAS_sitepage + '/1' + OAS_rns + '@' + OAS_listpos + '?' + OAS_query + '"><\/SCRIPT>');
                        }

						function OAS_AD(pos) {
                            if (true) {
                                if (typeof(OAS_RICH) !== 'undefined' && OAS_version >= 11) {
                                    OAS_RICH(pos);
                                } else {
                                    OAS_NORMAL(pos);
                                }
                            }
						}
					
				//]]>
				
</script>
<script>
                //<![CDATA[
                jQ('#ad-placeholder-Top').writeCapture().replaceWith('<script>OAS_AD("Top")<' + '/script>');
                //]]>
            
</script>
<script>
              jQ('#ad-temp-Top').hide();
          
</script>
<script>
                //<![CDATA[
                jQ('#ad-placeholder-Middle1').writeCapture().replaceWith('<script>OAS_AD("Middle1")<' + '/script>');
                //]]>
            
</script>
<script>
              jQ('#ad-temp-Middle1').hide();
          
</script>
<script type="text/javascript">
ensurePackage("guardian.r2.omniture");
guardian.r2.omniture.isAvailable = function(){
			return true;
	}

</script>
<script type="text/javascript">
	//	<![CDATA[
	if(true) {
        var OAS_taxonomy='&Paneled_Site=guardian.co.uk&Paneled_Section=crosswords';
		jQ(document).ready(function(){
			jQ.getScript('http://static.guim.co.uk/static/4b5ffdccf8b3ac1565b9621a6ee0ef295b55a28d/common/scripts/kantarmedia.js');
		});
	}
	// ]]>

</script>